const WebSocket = require('ws');
const { watchMint } = require('./mintWatcher'); // –ü–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–π watchMint —Å—é–¥–∞

require('dotenv').config();

const HELIUS_KEY = process.env.HELIUS_API_KEY;
const BINANCE_CHAT_ID = Number(process.env.BINANCE_CHAT_ID);
const PRIVATE_CHAT_ID = Number(process.env.PRIVATE_CHAT_ID);

const EXCHANGE_WALLETS = [
  { address: '6pB5Qk1WbA2uJipjTSyckU9NBr7iYrPKF3nB9uYoJ3vK', label: '–ö—É–∫-1' },
  { address: '9vzEF1Da8zh79QdhtL8GvHGFXMfJh6ETKcXYb8KzWQL9', label: '–ë–∏–Ω–∞–Ω—Å' }
];

EXCHANGE_WALLETS.forEach(({ address, label }) => {
  const ws = new WebSocket(`wss://rpc.helius.xyz/?api-key=${HELIUS_KEY}`);

  ws.on('open', () => {
    console.log(`üì° –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ ${label}: ${address}`);
    ws.send(JSON.stringify({
      jsonrpc: '2.0',
      id: 1,
      method: 'addressSubscribe',
      params: [
        { address },
        { commitment: 'confirmed' }
      ]
    }));
  });

  ws.on('message', async (data) => {
    try {
      const msg = JSON.parse(data);
      const tx = msg.params?.result?.transaction;
      const instructions = tx?.message?.instructions || [];
      const preBalances = msg.params?.result?.meta?.preBalances || [];
      const postBalances = msg.params?.result?.meta?.postBalances || [];

      for (const ix of instructions) {
        if (ix.program === 'system' && ix.parsed?.type === 'transfer') {
          const amount = Number(ix.parsed.info.lamports) / 1e9;
          const from = ix.parsed.info.source;
          const to = ix.parsed.info.destination;

          if (amount === 99.99 || amount === 68.99 || amount === 99.999) {
            const targetChat = label === '–ë–∏–Ω–∞–Ω—Å' ? BINANCE_CHAT_ID : PRIVATE_CHAT_ID;
            const summary = `‚ö†Ô∏è [${label}] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ ${amount} SOL\nüí∞ –ê–¥—Ä–µ—Å: <code>${to}</code>\n‚è≥ –û–∂–∏–¥–∞–µ–º mint...`;
            console.log(summary);
            require('./botInstance').bot.sendMessage(targetChat, summary, { parse_mode: 'HTML' });

            watchMint(to, label, targetChat); // –∫–∞–∫ –≤ index.js
          }
        }
      }
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket: ${err.message}`);
    }
  });

  ws.on('close', () => {
    console.log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è ${label}`);
  });

  ws.on('error', (e) => {
    console.error(`üí• WebSocket –æ—à–∏–±–∫–∞ (${label}): ${e.message}`);
  });
});
